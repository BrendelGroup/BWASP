#Makefile_WF1-6se_template
#
#Makefile for BWASP workflow steps 1-6, from downloading SRA data to the Creport and methylation calls.
#Labeling of steps follows Figs. 1 & 2 in the manuscript.
#
#This is the single-read version.  For paired-read analysis, use Makefile_WF1-6pe_template.
#Version: June 11, 2016.
#
#Note:	This version requires the BWASP repository bismark_methylation_extractor (until BISMARK gets updated).
#       You will also need to place a copy of bismark2bedGraph into the BWASP/bin directory.


#Typical usage:
#
#	cp Makefile_WF1-6se_template Makefile_WF1-6se_yours
#		(copy the template makefile, edit appropriately as per instructions below)
#	make -j 4 -f Makefile_WF1-6se_yours
#       make -f Makefile_WF1-6_se_yours cleanup
#       make -f Makefile_WF1-6_se_yours finishup


########################################################################################################################
#Please be careful while editing the Makefile as it is 'tab-sensitive'.
#Typical customization should only involve apppropriate editing of the variables in the next section.
#
#The following variables specify the data sets and labels to be used.
#
#This template illustrates the settings for analysis of an Apis mellifera data set to be downloaded
#from the NCBI Short Read Archive.  The GENOME variable must be set in accordance with the deposition
#of the genome sequence file in the genome directory read by the workflow.  Specifically, in the directory
#where you invoke "make", there should be a subdirectory "genome" which contains the file $(GENOME).fa
#(a FASTA-formatted file containing the genome sequences).
#
#The SAMPLE and SOURCE variables must be set to the SRA data set label and the appropriate download
#directory.  SYNONYM is a label used by BWASP do uniquely label output files.
#
#Note: Download from NCBI SRA is of course not required but merely a convenience for ease of access and
#      reproducibility.  Alternatively, you can simply deposit files $(SAMPLE)_1.fastq and $(SAMPLE)_2.fastq
#      in the directory where you invoke "make".  For example, assume you have your own read files
#      mydata_1.fastq and mydata_2.fastq.  Then you could use a copy of this makefile by setting
#      SAMPLE = mydata and invoking "touch mydata.sra; touch mydata_*.fastq" before running make
#      (alternatively, you could delete section 1.1 below before running make).
#
GENOME  = Amel.gdna
SAMPLE  = SRR1270128
SYNONYM = Amel-afbCTRL

SOURCE  = "ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/SRR127/$(SAMPLE)"

#The following variables set the directories where BWASP requrired binaries reside.  In this
#template, the BWASP package was cloned in a user's ~/gitwd directory, and required other
#software was installed under /usr/local/src/BWASP.
#
BINDIR  = ~/gitwd/BWASP/bin
SRCDIR  = /usr/local/src/BWASP

BISMARK     = $(SRCDIR)/BISMARK/bismark_v0.16.1
BOWTIE2     = $(SRCDIR)/BOWTIE2/bowtie2-2.2.7
FASTQC      = $(SRCDIR)/FASTQC/FastQC
SAMTOOLS    = $(SRCDIR)/SAMTOOLS/samtools
SRATOOLKIT  = $(SRCDIR)/SRATOOLKIT/sratoolkit.2.5.7-centos_linux64/bin
TRIM_GALORE = $(SRCDIR)/TRIM_GALORE/trim_galore_zip

#The following variables set options for programs called in the BWASP workflow.
#Please read the instructions of the respective programs to make choices that fit your
#data analysis needs.
#
BOWTIE2_OPTIONS       = -p 2 --score_min L,0,-0.6
BISMARK_OPTIONS       = --multicore 10  --path_to_bowtie $(BOWTIE2) --bowtie2 $(BOWTIE2_OPTIONS) --samtools_path $(SAMTOOLS)/samtools
FASTQC_OPTIONS        = --threads 2  --extract
SAMTOOLS_SORT_OPTIONS = -m 25G -@ 4
TRIM_GALORE_OPTIONS   = 
SORT_BUFFER_SIZE      = 20G
BME_OPTIONS           = --multicore 10  --buffer_size $(SORT_BUFFER_SIZE)
#
### ! Note: The --phred33/64 option to trim_galore is set below according to the output of FastQC
###
########################################################################################################################
### ! Typically there would be no need for further editing below this line ! ###
run_gprep = no
ifeq ("$(wildcard ./genome/Bisulfite_Genome/CT_conversion/genome_mfa.CT_conversion.fa)","")
	run_gprep = yes
endif
ifeq ("$(wildcard ./genome/Bisulfite_Genome/GA_conversion/genome_mfa.GA_conversion.fa)","")
	run_gprep = yes
endif


all:	genome fastqc1 fastqc2 $(SYNONYM).sam $(SYNONYM).M-bias.eval $(SYNONYM).Creport CXreports \
	$(SYNONYM).mstats $(SAMPLE).stats $(GENOME).stats
.PHONY:	genome Bisulfite_Genome


###1.1 bismark genome preparation.
###    (requires the genome of interest, $(GENOME).fa, to have been placed into the folder ./genome)
#
genome:	./genome/$(GENOME).fa Bisulfite_Genome

./genome/$(GENOME).fa:	
ifeq ("$(wildcard ./genome/$(GENOME).fa)","")
	$(error No genome file ./genome/$(GENOME).fa found. Please provide.)
endif

Bisulfite_Genome:
ifeq ("$(run_gprep)","yes")
	$(BISMARK)/bismark_genome_preparation --path_to_bowtie $(BOWTIE2) --bowtie2 ./genome
endif


###1.2 Obtain the SRA reads from NCBI:
#
$(SAMPLE).sra:	
	wget $(SOURCE)/$(SAMPLE).sra

%.fastq:	%.sra
	$(SRATOOLKIT)/fastq-dump  $*.sra
ifeq ("$(wildcard ./FastQC)","")
	mkdir FastQC
endif


###1.3 Run FastQC to check the quality of the reads:
#
fastqc1:	FastQC/$(SAMPLE)_fastqc/fastqc_data.txt

FastQC/$(SAMPLE)_fastqc/fastqc_data.txt:	$(SAMPLE).fastq
	$(FASTQC)/fastqc  $(FASTQC_OPTIONS)  --outdir=FastQC  $(SAMPLE).fastq


###1.4 Trim the reads to remove low quality bases and adapater sequences:
#
%_trimmed.fq:	%.fastq FastQC/$(SAMPLE)_fastqc/fastqc_data.txt
	$(eval ENCODING = $(shell awk 'NR==6' FastQC/$(SAMPLE)_fastqc/fastqc_data.txt | awk -F" " '{printf("%s",$$5)}'))
	if [ $(ENCODING) = "1.9" ]; then \
		$(TRIM_GALORE)/trim_galore  $(TRIM_GALORE_OPTIONS) --phred33  $*.fastq; \
	else \
		$(TRIM_GALORE)/trim_galore  $(TRIM_GALORE_OPTIONS) --phred64  $*.fastq; \
	fi


###1.5 Run FastQC again to check the quality of the trimmed reads:
#
fastqc2:	FastQC/$(SAMPLE)_trimmed_fastqc/fastqc_data.txt

FastQC/$(SAMPLE)_trimmed_fastqc/fastqc_data.txt:	$(SAMPLE)_trimmed.fq
	$(FASTQC)/fastqc  $(FASTQC_OPTIONS)  --outdir=FastQC  $(SAMPLE)_trimmed.fq


###2.1-2 Map the reads to the genome (using bowtie2 via bismark):
#
$(SAMPLE)_trimmed_bismark_bt2.bam:	$(SAMPLE)_trimmed.fq
	$(BISMARK)/bismark  $(BISMARK_OPTIONS)  ./genome $(SAMPLE)_trimmed.fq

$(SAMPLE)_trimmed_bismark_bt2.sam:	$(SAMPLE)_trimmed_bismark_bt2.bam
	$(SAMTOOLS)/samtools view $(SAMPLE)_trimmed_bismark_bt2.bam > $(SAMPLE)_trimmed_bismark_bt2.sam


###2.3 Remove potential PCR artefacts using the bismark deduplication script:
#
$(SYNONYM)-deduplicated.sam:	$(SAMPLE)_trimmed_bismark_bt2.sam
	$(BISMARK)/deduplicate_bismark -s $(SAMPLE)_trimmed_bismark_bt2.sam
	mv $(SAMPLE)_trimmed_bismark_bt2.deduplicated.sam $(SYNONYM)-deduplicated.sam


###2.4 Filter reads to remove likely non-BS-treated contaminants:
#
$(SYNONYM).sam:	$(SYNONYM)-deduplicated.sam $(SAMPLE)-header.sam
	$(BINDIR)/xfilterMsam $(BINDIR) s $(SYNONYM)-deduplicated
	cat $(SAMPLE)-header.sam Accepted-Reads-$(SYNONYM)-deduplicated.sam > $(SYNONYM).sam

$(SAMPLE)-header.sam:	$(SAMPLE)_trimmed_bismark_bt2.bam
	$(SAMTOOLS)/samtools view -H $(SAMPLE)_trimmed_bismark_bt2.bam > $(SAMPLE)-header.sam


###3.1-2 Determine potential methylation-biased positions in the reads:
#
$(SYNONYM).M-bias.txt:	$(SYNONYM).sam
	$(BINDIR)/bismark_methylation_extractor $(BME_OPTIONS) --mbias_only -s $(SYNONYM).sam
	mv $(SYNONYM)_splitting_report.txt $(SYNONYM)_mbias_only_splitting_report.txt

$(SYNONYM).M-bias.eval:	$(SYNONYM).M-bias.txt
	python $(BINDIR)/eval_srmbias.py $(SYNONYM).M-bias.txt > $(SYNONYM).M-bias.eval


###3.3-4 Generate the Creport file:
#
$(SYNONYM).bismark.cov.gz:	$(SYNONYM).M-bias.eval $(SYNONYM).sam
	$(eval R1FP = $(shell egrep "^--ignore" $(SYNONYM).M-bias.eval | awk -F" " '{print $$2}'))
	$(eval R1TP = $(shell egrep "^--ignore" $(SYNONYM).M-bias.eval | awk -F" " '{print $$4}'))
	$(BINDIR)/bismark_methylation_extractor $(BME_OPTIONS) --mbias_off -s --ignore $(R1FP) --maxrlgth $(R1TP)  --bedGraph --CX --scaffolds $(SYNONYM).sam

$(SYNONYM).cov:	$(SYNONYM).bismark.cov.gz
	zcat $(SYNONYM).bismark.cov.gz | sort -V -S $(SORT_BUFFER_SIZE) > $(SYNONYM).cov

creport:	./genome/$(GENOME).fa $(SYNONYM).cov
	$(BISMARK)/coverage2cytosine -o creport --genome_folder ./genome --CX  $(SYNONYM).cov

$(SYNONYM).Creport:	creport
	sort -V -S $(SORT_BUFFER_SIZE) creport > $(SYNONYM).Creport


###5.1-2 Generate the CXreport files:
#
CXreports:	$(SYNONYM).CpGreport $(SYNONYM).CHGreport $(SYNONYM).CHHreport $(SYNONYM).HSMthresholds

%.CpGreport %.CHGreport %.CHHreport %.HSMthresholds:	%.Creport
	python $(BINDIR)/Creport2CXreport.py $*.Creport $*.CpGreport $*.CHGreport $*.CHHreport > $*.HSMthresholds


###6.1-2 Generate and print methylation statistics.
#
$(SYNONYM).mstats:	$(SYNONYM).Creport \
			$(SYNONYM).CpGscd.mcalls $(SYNONYM).CpGhsm.mcalls $(SYNONYM).CpGnsm.mcalls \
			$(SYNONYM).CHGscd.mcalls $(SYNONYM).CHGhsm.mcalls $(SYNONYM).CHGnsm.mcalls \
			$(SYNONYM).CHHscd.mcalls $(SYNONYM).CHHhsm.mcalls $(SYNONYM).CHHnsm.mcalls
	$(BINDIR)/mstats.sh $(SYNONYM) > $(SYNONYM).mstats

###Intermediate step: determine highly supported methylation sites using the CXreport2hsm.py script.
#
%.CpGscd.mcalls %.CpGhsm.mcalls %.CpGnsm.mcalls:	%.HSMthresholds %.CpGreport
	$(eval CpGnval = $(shell egrep "Thus.*CpG" $*.HSMthresholds | awk '{print $$NF}'))
	python $(BINDIR)/CXreport2hsm.py $*.CpGreport $(CpGnval) $*.CpGscd.mcalls $*.CpGhsm.mcalls $*.CpGnsm.mcalls

%.CHGscd.mcalls %.CHGhsm.mcalls %.CHGnsm.mcalls:	%.HSMthresholds %.CHGreport
	$(eval CHGnval = $(shell egrep "Thus.*CHG" $*.HSMthresholds | awk '{print $$NF}'))
	python $(BINDIR)/CXreport2hsm.py $*.CHGreport $(CHGnval) $*.CHGscd.mcalls $*.CHGhsm.mcalls $*.CHGnsm.mcalls

%.CHHscd.mcalls %.CHHhsm.mcalls %.CHHnsm.mcalls:	%.HSMthresholds %.CHHreport
	$(eval CHHnval = $(shell egrep "Thus.*CHH" $*.HSMthresholds | awk '{print $$NF}'))
	python $(BINDIR)/CXreport2hsm.py $*.CHHreport $(CHHnval) $*.CHHscd.mcalls $*.CHHhsm.mcalls $*.CHHnsm.mcalls


###6.2 Generate and print sample statistics.
#
$(SAMPLE).stats:	$(SAMPLE).fastq \
			FastQC/$(SAMPLE)_fastqc/fastqc_data.txt \
			$(SAMPLE)_trimmed.fq \
			FastQC/$(SAMPLE)_trimmed_fastqc/fastqc_data.txt \
			$(SYNONYM).bam
	$(BINDIR)/sstats-se.sh $(SAMPLE) $(SYNONYM) $(GENOME) $(SAMTOOLS)

$(SYNONYM).bam:	$(SYNONYM).sam
	$(SAMTOOLS)/samtools view -bS $(SYNONYM).sam | $(SAMTOOLS)/samtools sort $(SAMTOOLS_SORT_OPTIONS) -o $(SYNONYM).bam -

#Note: sstats-se.sh is using "samtools depth" to obtain the total aligned base count and, by dividing that value by the genome size,
#      the genome coverage); the sorted bam file produced above is required for that step.


###6.3 Generate and print genome statistics.
#
$(GENOME).stats:	./genome/$(GENOME).fa
	$(BINDIR)/asmbleval.pl < ./genome/$(GENOME).fa > $(GENOME).stats



###Clean up the output directory:
#
cleanup:
	-\mkdir _SCRATCH
	-\mv $(SAMPLE).sra _SCRATCH
	-\mv $(SAMPLE).fastq _SCRATCH
	-\mv $(SAMPLE)_trimmed.fq _SCRATCH
	-\mv $(SAMPLE)_trimmed_bismark_bt2.sam _SCRATCH
	-\mv $(SYNONYM)-deduplicated.sam _SCRATCH
	-\mv Accepted-Reads-$(SYNONYM)-deduplicated.sam _SCRATCH
	-\mv $(SYNONYM).bedGraph.gz _SCRATCH
	-\mv $(SYNONYM).bismark.cov.gz _SCRATCH
	-\mv creport _SCRATCH
	 
	-\mkdir STORE-$(SAMPLE)
	-\mv $(SAMPLE)_trimmed_bismark_bt2.bam STORE-$(SAMPLE)
	-\mv $(SYNONYM).sam STORE-$(SAMPLE)/
	-\mv CHH*txt CHG*txt STORE-$(SAMPLE)
	-\mv $(SYNONYM).cov STORE-$(SAMPLE)
	-\mv $(SYNONYM)*report STORE-$(SAMPLE)
	
###Finish up after cleanup:
#
finishup:
	-\rm -rf _SCRATCH
	zip -r STORE-$(SAMPLE) STORE-$(SAMPLE)
	-\rm -rf STORE-$(SAMPLE)
