#Makefile_merge_4replicates
#
#Makefile to merge BWASP *.Creport files for combined input into workflow step 5.
#Version: April 23, 2018

#Usage: make -j 4 -f Makefile_merge_4replicates

################################################################################
#Edit this section in such a way that the *.Creport files of the replicates are
#found.
#
#This makefile is a template for merging 4 replicates.
#For convenience, other templates are provided.
#
#The assumption made in this template is that the replicate *.Creport files are
#either present in the replicate* directories or that they were stored in a *.zip
#archive as constructed by Makefile_WF1-6*, target "cleanup finishup".  In the former
#case, specify the replicate *.Creport files in the CreportStore* variables below.
#In the latter case, specify the *.zip archives in the CreportStore* variables and
#the Creport files in the CreportFile* variables below.

#If the replicate *.Creport files are stored elsewhere, simple modifications of this
#makefile will do.

#For example, for the Polisted dominula data sets analyzed as in the BWASP HOWTO
#instructions, you would run a copy of the Makefile_merge_3templates in the Queen
#directory with variable settings as follows:
#
#SYNONYM     = Pcan-queen
#SAMPLE1     = SRR1519132
#SYNONYM1    = Pcan-21Q
#SAMPLE2     = SRR1519133
#SYNONYM2    = Pcan-43Q
#SAMPLE3     = SRR1519134
#SYNONYM3    = Pcan-75Q

###
SYNONYM     = Species-sample
SAMPLE1     = SRR.....1
SYNONYM1    = Species-sample1
SAMPLE2     = SRR.....2
SYNONYM2    = Species-sample2
SAMPLE3     = SRR.....3
SYNONYM3    = Species-sample3
SAMPLE4     = SRR.....4
SYNONYM4    = Species-sample4

CreportStore1       = ./replicate1/$(SYNONYM1).Creport
#CreportStore1       = ./replicate1/STORE-$(SAMPLE1).zip
#CreportFile1        = STORE-$(SAMPLE1)/$(SYNONYM1).Creport

CreportStore2       = ./replicate2/$(SYNONYM2).Creport
#CreportStore2       = ./replicate2/STORE-$(SAMPLE2).zip
#CreportFile2        = STORE-$(SAMPLE2)/$(SYNONYM2).Creport

CreportStore3       = ./replicate3/$(SYNONYM3).Creport
#CreportStore3       = ./replicate3/STORE-$(SAMPLE3).zip
#CreportFile3        = STORE-$(SAMPLE3)/$(SYNONYM3).Creport

CreportStore4       = ./replicate4/$(SYNONYM4).Creport
#CreportStore4       = ./replicate4/STORE-$(SAMPLE4).zip
#CreportFile4        = STORE-$(SAMPLE4)/$(SYNONYM4).Creport

################################################################################
### ! Typically there would be no need for further editing below this line ! ###

all:	$(SYNONYM).Creport $(SYNONYM).mstats

#############################################################

### 1. Merging the Creports of the distinct replicates:
#
#
$(SYNONYM1).Creport:	$(CreportStore1)
	$(eval isgzip = $(shell file $(CreportStore1) | egrep "Zip archive data" | wc -l))
	if [ $(isgzip) -eq 0 ]; then \
		cp $(CreportStore1) ./; \
	else \
		unzip -j $(CreportStore1) $(CreportFile1); \
	fi

$(SYNONYM2).Creport:	$(CreportStore2)
	$(eval isgzip = $(shell file $(CreportStore2) | egrep "Zip archive data" | wc -l))
	if [ $(isgzip) -eq 0 ]; then \
		cp $(CreportStore2) ./; \
	else \
		unzip -j $(CreportStore2) $(CreportFile2); \
	fi

$(SYNONYM3).Creport:	$(CreportStore3)
	$(eval isgzip = $(shell file $(CreportStore3) | egrep "Zip archive data" | wc -l))
	if [ $(isgzip) -eq 0 ]; then \
		cp $(CreportStore3) ./; \
	else \
		unzip -j $(CreportStore3) $(CreportFile3); \
	fi

$(SYNONYM4).Creport:	$(CreportStore4)
	$(eval isgzip = $(shell file $(CreportStore4) | egrep "Zip archive data" | wc -l))
	if [ $(isgzip) -eq 0 ]; then \
		cp $(CreportStore4) ./; \
	else \
		unzip -j $(CreportStore4) $(CreportFile4); \
	fi

$(SYNONYM)-12.Creport:	$(SYNONYM1).Creport $(SYNONYM2).Creport
	mergeCreports.pl $(SYNONYM1).Creport $(SYNONYM2).Creport --outfile $(SYNONYM)-12.Creport

$(SYNONYM)-34.Creport:	$(SYNONYM3).Creport $(SYNONYM4).Creport
	mergeCreports.pl $(SYNONYM3).Creport $(SYNONYM4).Creport --outfile $(SYNONYM)-34.Creport

$(SYNONYM).Creport:	$(SYNONYM)-12.Creport $(SYNONYM)-34.Creport
	mergeCreports.pl $(SYNONYM)-12.Creport $(SYNONYM)-34.Creport --outfile $(SYNONYM).Creport


### 2. Creating the seperate contexts from the Creport using the Creport2CXreport.py script:
#
#
CXreports:	$(SYNONYM).CpGreport $(SYNONYM).CHGreport $(SYNONYM).CHHreport $(SYNONYM).HSMthresholds

%.CpGreport %.CHGreport %.CHHreport %.HSMthresholds:	%.Creport
	Creport2CXreport.py $*.Creport $*.CpGreport $*.CHGreport $*.CHHreport > $*.HSMthresholds


### 3. Generate and print methylation statistics.
#
#
$(SYNONYM).mstats:	$(SYNONYM).Creport \
		 	$(SYNONYM).CpGscd.mcalls $(SYNONYM).CpGhsm.mcalls $(SYNONYM).CpGnsm.mcalls \
			$(SYNONYM).CHGscd.mcalls $(SYNONYM).CHGhsm.mcalls $(SYNONYM).CHGnsm.mcalls \
			$(SYNONYM).CHHscd.mcalls $(SYNONYM).CHHhsm.mcalls $(SYNONYM).CHHnsm.mcalls
	mstats.sh $(SYNONYM) > $(SYNONYM).mstats

###Intermediate step: determine highly supported methylation sites using the CXreport2hsm.py script.
#
%.CpGscd.mcalls %.CpGhsm.mcalls %.CpGnsm.mcalls:	%.HSMthresholds %.CpGreport
	$(eval CpGnval = $(shell egrep "Thus.*CpG" $*.HSMthresholds | awk '{print $$NF}'))
	CXreport2hsm.py $*.CpGreport $(CpGnval) $*.CpGscd.mcalls $*.CpGhsm.mcalls $*.CpGnsm.mcalls

%.CHGscd.mcalls %.CHGhsm.mcalls %.CHGnsm.mcalls:	%.HSMthresholds %.CHGreport
	$(eval CHGnval = $(shell egrep "Thus.*CHG" $*.HSMthresholds | awk '{print $$NF}'))
	CXreport2hsm.py $*.CHGreport $(CHGnval) $*.CHGscd.mcalls $*.CHGhsm.mcalls $*.CHGnsm.mcalls

%.CHHscd.mcalls %.CHHhsm.mcalls %.CHHnsm.mcalls:	%.HSMthresholds %.CHHreport
	$(eval CHHnval = $(shell egrep "Thus.*CHH" $*.HSMthresholds | awk '{print $$NF}'))
	CXreport2hsm.py $*.CHHreport $(CHHnval) $*.CHHscd.mcalls $*.CHHhsm.mcalls $*.CHHnsm.mcalls



###Clean up the output directory:
#
cleanup:
	-\mkdir _SCRATCH
	-\mv $(SYNONYM1).Creport $(SYNONYM2).Creport $(SYNONYM3).Creport $(SYNONYM4).Creport _SCRATCH/
	-\mv $(SYNONYM)-12.Creport $(SYNONYM)-34.Creport _SCRATCH/
	
	-\mkdir STORE-$(SYNONYM)
	-\mv $(SYNONYM)*report STORE-$(SYNONYM)
	
###Finish up after cleanup:
#
finishup:
	-\rm -rf _SCRATCH
	zip -r STORE-$(SYNONYM) STORE-$(SYNONYM)
	-\rm -rf STORE-$(SYNONYM)
